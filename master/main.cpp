#include "../VecH/Vector.h"

int main()
{
    //! Конструктор без параметров
    Vector vec1;
    std::cout << "\033[36m Vector v1 created successfully! \033[0m \n";
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    //! Конструктор с параметрами
    double arr[] = {1.1, 3.3};
    Vector vec2(arr, 2);
    std::cout << "\033[36m Конструктор с параметрами \n vec2 = \033[0m";
    vec2.printVec();
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    //PushBack
    vec2.pushBack(4.4);
    std::cout << "\033[36m PushBack '4.4' \n vec2 = \033[0m";
    vec2.printVec();
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    //PushFront
    vec2.pushFront(0);
    std::cout << "\033[36m PushFront '0' \n vec2 = \033[0m";
    vec2.printVec();
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    //Вставка элемента value в позицию pos
    vec2.insert(2.2, 2);
    std::cout << "\033[36m Вставка элемента '2.2' в позицию 3 \n vec2 = \033[0m";
    vec2.printVec();
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    // Вставка массива элементов типа ValueType в позицию pos
    double arr2[] = {1.1, 4.4, 5.5};
    Vector vec3(arr2, 3);

    double tmp_arr[] = {2.2, 3.3};
    vec3.insert(tmp_arr, 2, 1);
    std::cout << "\033[36m Вставка tmp_arr в позицию 2 \n vec3 = \033[0m";
    vec3.printVec();
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    // Вставка содержимого вектора в позицию pos
    double arr3[] = {1.1, 4.4, 5.5};
    Vector vec4(arr2, 3);

    double tmp_arr2[] = {2.2, 3.3};
    Vector tmp_vec(tmp_arr,2);
    vec4.insert(tmp_vec, 1);
    std::cout << "\033[36m Вставка tmp_vec в позицию 2 \n vec4 = \033[0m";
    vec4.printVec();
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    // Удаление с конца
    vec4.popBack();
    std::cout << "\033[36m Удаление с конца \n vec4 = \033[0m";
    vec4.printVec();
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    // Удаление из начала
    vec4.popFront();
    std::cout << "\033[36m Удаление из начала \n vec4 = \033[0m";
    vec4.printVec();
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    // Удалить элемент из вектора
    vec3.erase(1, 3);
    std::cout << "\033[36m Удалить 2 элемента из вектора \n vec3 = \033[0m";
    vec3.printVec();
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    // Удалить элемент из вектора
    double arr4[] = {1.1, 2.2, 3.3, 4.4, 5.5};
    Vector vec5(arr4, 5);
    vec5.eraseBetween(1, 4);
    std::cout << "\033[36m Удалить с 2.2 до 5.5 элемент из вектора \n vec5 = \033[0m";
    vec5.printVec();
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    // Поиск первого вхождения значения
    std::cout << "\033[36m Поиск первого вхождения '5.5' \n Eclips = \033[0m" << vec5.find(5.5) << std::endl;
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    //SIZE      CAPACITY        LOADFACTOR      SHRINKFIT       RESERVE
    std::cout << "\033[36m size v5\t\t\t\t| \033[0m" << vec5.size() << "\n";
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    std::cout << "\033[36m capacity v5\t\t\t\t| \033[0m" << vec5.capacity() << "\n";
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    std::cout << "\033[36m loadFactor v5\t\t\t\t| \033[0m" << vec5.loadFactor() << "\n";
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    vec5.shrinkToFit();
    std::cout << "\033[36m v5.shrinkToFit\t\t\t\t| \033[0m" <<  "\033[36m Capacity = \033[0m" << vec5.capacity() << "\n";
    std::cout << "\033[35m ===================================================================== \033[0m \n";

    vec5.reserve(5);
    std::cout << "\033[36m v5.reserve\t\t\t\t| \033[0m" << "\033[36m Capacity = \033[0m" << vec5.capacity() << "\n";
    std::cout << "\033[35m ===================================================================== \033[0m \n";
}